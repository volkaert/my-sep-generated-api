package fr.volkaert.sep.my_sep_generated_api;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import fr.volkaert.sep.my_sep_generated_api.order.api.v1.impl.OrderService;
import fr.volkaert.sep.my_sep_generated_api.order.db.OrderEntity;
import fr.volkaert.sep.my_sep_generated_api.order.db.OrderRepository;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.info.License;
import io.swagger.v3.oas.annotations.security.OAuthFlow;
import io.swagger.v3.oas.annotations.security.OAuthFlows;
import io.swagger.v3.oas.annotations.security.OAuthScope;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
import org.springframework.scheduling.annotation.EnableScheduling;

import java.time.OffsetDateTime;

@SpringBootApplication
@ComponentScan("fr.volkaert")
@EntityScan("fr.volkaert")
@EnableJpaRepositories("fr.volkaert")
@EnableScheduling
//@EnableCaching
@OpenAPIDefinition(
        info = @Info(
                title = "My SEP Generated API",
                description = "Example of Java SpringBoot API generated by the SEP",
                version = "1.0",
                contact = @Contact(name = "API Support", email = "support@acme.com"),
                license = @License(name = "free")
        )
)
@SecurityScheme(name = "my-auth-server",
        type = SecuritySchemeType.OAUTH2,
        flows = @OAuthFlows(
                clientCredentials = @OAuthFlow(
                        tokenUrl = "https://my-auth-server/oauth2/access_token",
                        scopes = {
                                @OAuthScope(name = "api.my-sep-generated-api.v1", description = "Access to the API")
                        }
                )
        )
)
public class MyApplication {

    @Value("${my-sep-generated-api.tests.insert-fake-data-in-database-at-startup:false}")
    private boolean insertFakeDataInDatabase;

    public static void main(String[] args) { SpringApplication.run(MyApplication.class, args); }

    @Bean
    public CommandLineRunner run(OrderService orderService, OrderRepository orderRepository) throws Exception {
        return (String[] args) -> {
            System.out.println("My Application started...");

            if (insertFakeDataInDatabase) {
                System.out.println("Inserting fake data in database...");

                for (int id = 1; id <= 100; id++) {
                    OffsetDateTime now = OffsetDateTime.now();
                    OrderEntity orderEntityToCreate = OrderEntity.builder()
                            .id("" + id)
                            .someStringData("someStringValue" + id)
                            .createdAt(now)
                            .updatedAt(now)
                            .build();
                    orderRepository.save(orderEntityToCreate);
                    System.out.println(String.format("Order with id %s created", id));

                    /*
                    orderService.createOrder(CreateOrderRequest.builder()
                            .someStringData("someStringData" + i)
                            .build());
                     */
                }
            }
        };
    }

    @Bean
    @Primary
    public ObjectMapper createObjectMapper(Jackson2ObjectMapperBuilder builder) {
        // see https://www.baeldung.com/spring-boot-customize-jackson-objectmapper
        return builder
                .serializationInclusion(JsonInclude.Include.NON_NULL)
                //.failOnUnknownProperties(false)
                //.defaultViewInclusion(false)
                //.modules(new JavaTimeModule())
                .featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)
                .build();
    }
}
